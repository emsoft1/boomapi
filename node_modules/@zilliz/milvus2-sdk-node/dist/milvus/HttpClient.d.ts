import { AxiosInstance } from 'axios';
import { HttpClientConfig } from './types';
export declare class HttpBaseClient {
    config: HttpClientConfig;
    client: AxiosInstance;
    constructor(config: HttpClientConfig);
    get baseURL(): string;
    get authorization(): string;
    get database(): string;
    get timeout(): number;
    get POST(): <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
    get GET(): <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
}
declare const HttpClient_base: {
    new (...args: any[]): {
        createCollection(data: import("./types").HttpCollectionCreateReq): Promise<import("./types").HttpBaseResponse<{}>>;
        describeCollection(params: import("./types").HttpBaseReq): Promise<import("./types").HttpCollectionDescribeResponse>;
        dropCollection(data: import("./types").HttpBaseReq): Promise<import("./types").HttpBaseResponse<{}>>;
        listCollections(params?: import("./types").HttpCollectionListReq): Promise<import("./types").HttpCollectionListResponse>;
        config: HttpClientConfig;
        client: AxiosInstance;
        readonly baseURL: string;
        readonly authorization: string;
        readonly database: string;
        readonly timeout: number;
        readonly POST: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
        readonly GET: <T_1 = any, R_1 = import("axios").AxiosResponse<T_1, any>, D_1 = any>(url: string, config?: import("axios").AxiosRequestConfig<D_1> | undefined) => Promise<R_1>;
    };
} & {
    new (...args: any[]): {
        get(params: import("./types").HttpVectorGetReq): Promise<import("./types").HttpBaseResponse<{}>>;
        insert(data: import("./types").HttpVectorInsertReq): Promise<import("./types").HttpVectorInsertResponse>;
        query(data: import("./types").HttpVectorQueryReq): Promise<import("./types").HttpVectorQueryResponse>;
        search(data: import("./types").HttpVectorSearchReq): Promise<import("./types").HttpVectorSearchResponse>;
        delete(data: import("./types").HttpVectorDeleteReq): Promise<import("./types").HttpBaseResponse<{}>>;
        config: HttpClientConfig;
        client: AxiosInstance;
        readonly baseURL: string;
        readonly authorization: string;
        readonly database: string;
        readonly timeout: number;
        readonly POST: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
        readonly GET: <T_1 = any, R_1 = import("axios").AxiosResponse<T_1, any>, D_1 = any>(url: string, config?: import("axios").AxiosRequestConfig<D_1> | undefined) => Promise<R_1>;
    };
} & typeof HttpBaseClient;
export declare class HttpClient extends HttpClient_base {
}
export {};
