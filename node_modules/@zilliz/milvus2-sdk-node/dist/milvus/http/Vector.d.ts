import { HttpBaseClient } from '../HttpClient';
import { Constructor, HttpVectorGetReq, HttpVectorInsertReq, HttpVectorInsertResponse, HttpVectorQueryReq, HttpVectorQueryResponse, HttpVectorSearchReq, HttpVectorDeleteReq, HttpVectorSearchResponse, HttpBaseResponse } from '../types';
export declare function Vector<T extends Constructor<HttpBaseClient>>(Base: T): {
    new (...args: any[]): {
        get(params: HttpVectorGetReq): Promise<HttpBaseResponse>;
        insert(data: HttpVectorInsertReq): Promise<HttpVectorInsertResponse>;
        query(data: HttpVectorQueryReq): Promise<HttpVectorQueryResponse>;
        search(data: HttpVectorSearchReq): Promise<HttpVectorSearchResponse>;
        delete(data: HttpVectorDeleteReq): Promise<HttpBaseResponse>;
        config: import("../types").HttpClientConfig;
        client: import("axios").AxiosInstance;
        readonly baseURL: string;
        readonly authorization: string;
        readonly database: string;
        readonly timeout: number;
        readonly POST: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
        readonly GET: <T_1 = any, R_1 = import("axios").AxiosResponse<T_1, any>, D_1 = any>(url: string, config?: import("axios").AxiosRequestConfig<D_1> | undefined) => Promise<R_1>;
    };
} & T;
