import { HttpBaseClient } from '../HttpClient';
import { Constructor } from '../types/index';
import { HttpCollectionCreateReq, HttpCollectionListReq, HttpCollectionListResponse, HttpCollectionDescribeResponse, HttpBaseResponse, HttpBaseReq } from '../types';
export declare function Collection<T extends Constructor<HttpBaseClient>>(Base: T): {
    new (...args: any[]): {
        createCollection(data: HttpCollectionCreateReq): Promise<HttpBaseResponse>;
        describeCollection(params: HttpBaseReq): Promise<HttpCollectionDescribeResponse>;
        dropCollection(data: HttpBaseReq): Promise<HttpBaseResponse>;
        listCollections(params?: HttpCollectionListReq): Promise<HttpCollectionListResponse>;
        config: import("../types").HttpClientConfig;
        client: import("axios").AxiosInstance;
        readonly baseURL: string;
        readonly authorization: string;
        readonly database: string;
        readonly timeout: number;
        readonly POST: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, data?: D | undefined, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
        readonly GET: <T_1 = any, R_1 = import("axios").AxiosResponse<T_1, any>, D_1 = any>(url: string, config?: import("axios").AxiosRequestConfig<D_1> | undefined) => Promise<R_1>;
    };
} & T;
