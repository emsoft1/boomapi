"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = exports.HttpBaseClient = void 0;
const axios_1 = __importDefault(require("axios"));
const http_1 = require("./http");
const const_1 = require("../milvus/const");
// base class
class HttpBaseClient {
    constructor(config) {
        // Assign the configuration object.
        this.config = config;
        // setup axios client
        this.client = axios_1.default.create({
            baseURL: this.baseURL,
            timeout: this.timeout,
            timeoutErrorMessage: '',
            withCredentials: true,
            headers: {
                Authorization: this.authorization,
                Accept: 'application/json',
                ContentType: 'application/json',
            },
        });
        // interceptors
        this.client.interceptors.request.use(request => {
            // if dbName is not set, using default database
            // GET
            if (request.params) {
                request.params.dbName = request.params.dbName || this.database;
            }
            // POST
            if (request.data) {
                request.data.dbName = request.data.dbName || this.database;
                request.data = JSON.stringify(request.data);
            }
            // console.log('request: ', request.data);
            return request;
        });
        this.client.interceptors.response.use(response => {
            return response.data;
        });
    }
    // baseURL
    get baseURL() {
        return (this.config.baseURL ||
            `${this.config.endpoint}/${this.config.version || const_1.DEFAULT_HTTP_ENDPOINT_VERSION}`);
    }
    // authorization
    get authorization() {
        let token = this.config.token || '';
        if (!token && this.config.username && this.config.password) {
            token = this.config.username + ':' + this.config.password;
        }
        return `Bearer ${token}`;
    }
    // database
    get database() {
        return this.config.database || const_1.DEFAULT_DB;
    }
    // timeout
    get timeout() {
        return this.config.timeout || const_1.DEFAULT_HTTP_TIMEOUT;
    }
    get POST() {
        return this.client.post;
    }
    get GET() {
        return this.client.get;
    }
}
exports.HttpBaseClient = HttpBaseClient;
// mixin APIs
class HttpClient extends (0, http_1.Collection)((0, http_1.Vector)(HttpBaseClient)) {
}
exports.HttpClient = HttpClient;
//# sourceMappingURL=HttpClient.js.map